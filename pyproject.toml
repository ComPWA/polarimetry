[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools>=61.2",
    "setuptools_scm",
    "wheel",
]

[project]
authors = [
    {name = "Mikhail Mikhasenko"},
    {name = "Remco de Boer"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
]
dependencies = [
    "IPython",
    "PyYAML",
    "ampform >=0.14.8", # @unevaluated decorator
    "ampform-dpd ~=0.1.6",
    "attrs >=20.1.0",
    "cloudpickle",
    "matplotlib",
    "numpy",
    "sympy >=1.10",
    "tensorwaves[jax] >=0.4.5",
]
description = "Symbolic expressions that describe an aligned polarimeter vector field"
dynamic = ["version"]
license = {file = "LICENSE"}
name = "polarimetry-lc2pkpi"
requires-python = ">=3.9"

[project.optional-dependencies]
dev = [
    "polarimetry-lc2pkpi[doc]",
    "polarimetry-lc2pkpi[jupyter]",
    "polarimetry-lc2pkpi[sty]",
    "polarimetry-lc2pkpi[test]",
    "sphinx-autobuild",
    "tox >=1.9",
]
doc = [
    "cairosvg",
    "deepdiff",
    "ipympl",
    "ipywidgets",
    "kaleido",
    "matplotlib-inline !=0.1.5",
    "myst-nb >=0.14",
    "pandas",
    "plotly",
    "psutil",
    "scipy",
    "sphinx-api-relink",
    "sphinx-book-theme",
    "sphinx-codeautolink[ipython]",
    "sphinx-copybutton",
    "sphinx-design",
    "sphinx-pybtex-etal-style",
    "sphinx-reredirects",
    "sphinx-togglebutton",
    "sphinxcontrib-bibtex >=2.2",
    "sphinxcontrib-svg2pdfconverter",
    "svgutils",
    "tqdm",
    "uproot",
]
jupyter = [
    "jupyterlab >=3.0",
    "jupyterlab",
    "jupyterlab-code-formatter >=3.0.0",
    "jupyterlab-git",
    "jupyterlab-lsp",
    "jupyterlab-myst",
    "polarimetry-lc2pkpi[doc]",
    "python-lsp-ruff",
    "python-lsp-server[rope]",
]
sty = [
    "mypy",
    "polarimetry-lc2pkpi[types]",
    "pre-commit-uv",
    "ruff",
]
test = [
    "nbmake",
    "pytest >=6.0",
    "pytest-xdist",
]
types = [
    "nbformat",
    "pybtex-docutils",
    "pytest",
    "sphinx-api-relink",
    "types-PyYAML",
    "types-docutils",
    "types-requests",
]

[project.readme]
content-type = "text/markdown"
file = "README.md"

[tool.setuptools]
include-package-data = false
package-dir = {"" = "src"}

[tool.setuptools.package-data]
"polarimetry.lhcb" = [
    "model-definitions.yaml",
    "particle-definitions.yaml",
]

[tool.setuptools.packages.find]
namespaces = false
where = ["src"]

[tool.setuptools_scm]
local_scheme = "no-local-version"
version_scheme = "only-version"
write_to = "src/polarimetry/version.py"

[tool.mypy]
exclude = "_build"
show_error_codes = true
warn_unused_configs = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["latexcodec.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["sympy.*"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["pybtex.*"]

[[tool.mypy.overrides]]
check_untyped_defs = true
disallow_incomplete_defs = false
disallow_untyped_defs = false
module = ["tests.*"]

[tool.pyright]
exclude = ["**/.venv/"]
include = ["src", "tests"]
reportArgumentType = false
reportAssignmentType = false
reportAttributeAccessIssue = false
reportCallIssue = true
reportGeneralTypeIssues = false
reportImportCycles = true
reportMissingParameterType = false
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportOperatorIssue = false
reportPrivateImportUsage = false
reportReturnType = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryContains = true
reportUnnecessaryIsInstance = false
reportUntypedBaseClass = false
reportUntypedFunctionDecorator = false
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedImport = true
reportUnusedVariable = true
typeCheckingMode = "strict"

[tool.pytest.ini_options]
addopts = [
    "--color=yes",
    "--doctest-continue-on-failure",
    "--doctest-modules",
    "--durations=3",
    "--ignore=docs/appendix/widget.ipynb",
    "--ignore=docs/conf.py",
    "-m not slow",
]
filterwarnings = [
    "error",
    "ignore:the imp module is deprecated in favour of importlib.*:DeprecationWarning",
]
markers = ["slow: marks tests as slow (select with '-m slow')"]
norecursedirs = [
    ".ipynb_checkpoints",
    "_build",
    "docs/extensions",
]
testpaths = [
    "src",
    "tests",
]

[tool.ruff]
extend-exclude = ["typings"]
extend-include = ["*.ipynb"]
preview = true
show-fixes = true
src = [
    "src",
    "tests",
]

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"

[tool.ruff.lint]
ignore = [
    "ANN",
    "COM812",
    "CPY001",
    "D101",
    "D102",
    "D103",
    "D105",
    "D107",
    "D203",
    "D213",
    "D407",
    "D416",
    "DOC",
    "E501",
    "FBT",
    "FURB101",
    "FURB103",
    "FURB140",
    "G004",
    "ISC001",
    "ISC003",
    "PLC2401",
    "PLC2403",
    "PLR0913",
    "PLR2004",
    "PLW1514",
    "PLW2901",
    "PT001",
    "PTH",
    "RUF001",
    "S403",
    "SIM108",
]
select = ["ALL"]
task-tags = ["cspell"]

[tool.ruff.lint.flake8-builtins]
builtins-allowed-modules = ["io"]
builtins-ignorelist = ["display"]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
known-third-party = ["sympy"]
split-on-trailing-comma = false

[tool.ruff.lint.pep8-naming]
ignore-names = [
    "*_I",
    "*_I_*",
    "A",
    "Dx",
    "I0",
    "I_*",
    "L",
    "P[xyz]",
    "R",
    "S",
    "U_*",
    "[RH]_*",
    "abs_Δα",
    "l_*",
    "mK",
    "mKπ",
    "max_L",
    "mΣ",
    "s_A",
    "Γ*",
    "λ*",
]

[tool.ruff.lint.per-file-ignores]
"*.ipynb" = [
    "B018",
    "C408",
    "C90",
    "D",
    "E303",
    "E402",
    "E703",
    "E741",
    "N8",
    "PD901",
    "PGH001",
    "PLC2701",
    "PLR09",
    "PLW0602",
    "PLW0603",
    "S101",
    "S102",
    "S301",
    "S307",
    "S310",
    "T20",
    "TCH00",
]
"**/benchmark.ipynb" = ["F821"]
"**/extensions/*.py" = ["ARG001"]
"**/polarimetry.ipynb" = ["SLF001"]
"**/uncertainties.ipynb" = ["ARG001"]
"**/widget.ipynb" = ["ARG001"]
"docs/*" = [
    "E402",
    "INP001",
    "S101",
    "S113",
    "S310",
    "TCH00",
]
"docs/conf.py" = [
    "A00",
    "D100",
    "DTZ005",
    "S404",
    "S60",
    "T201",
]
"src/polarimetry/io.py" = ["S301"] # pickle
"tests/*" = [
    "C408",
    "D",
    "INP001",
    "N806",
    "PGH001",
    "PLC2701",
    "PLR6301",
    "S101",
    "SLF001",
    "T20",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.tomlsort]
all = false
ignore_case = true
in_place = true
sort_first = [
    "build-system",
    "project",
    "tool.setuptools",
    "tool.setuptools_scm",
]
spaces_indent_inline_array = 4
trailing_comma_inline_array = true

[tool.tox]
legacy_tox_ini = """
[tox]
envlist =
    pdfnb-force,
    docnb,
    linkcheck,
    py,
    sty,
skip_install = True
skip_missing_interpreters = True
skipsdist = True

[testenv]
allowlist_externals =
    pytest
commands =
    pytest {posargs}
description = Run all unit tests
passenv = *
setenv =
    PYTHONHASHSEED = 0

[testenv:doc]
allowlist_externals =
    sphinx-build
commands =
    sphinx-build \
        --builder=html \
        --fail-on-warning \
        --keep-going \
        --nitpicky \
        --show-traceback \
        docs/ docs/_build/html
description = Build documentation with Sphinx
setenv =
    PYTHONWARNINGS =

[testenv:docnb]
base = doc
description = {[testenv:doc]description} with cached notebook execution
setenv =
    {[testenv:doc]setenv}
    EXECUTE_NB = yes

[testenv:docnb-force]
base = doc
description = {[testenv:doc]description} with notebook execution (no cache)
setenv =
    {[testenv:doc]setenv}
    FORCE_EXECUTE_NB = yes

[testenv:doclive]
allowlist_externals =
    sphinx-autobuild
commands =
    sphinx-autobuild \
        --ignore=docs/_build/ \
        --ignore=docs/_images/ \
        --ignore=docs/_static/export/ \
        --ignore=docs/_static/images/ \
        --ignore=docs/_static/julia/ \
        --ignore=docs/_static/polarimetry.pdf \
        --ignore=docs/api/ \
        --ignore=docs/appendix/export/ \
        --open-browser \
        --port=0 \
        --re-ignore='.*/__pycache__/.*' \
        --re-ignore='.*/.ipynb_checkpoints/.*' \
        --re-ignore='.*/.virtual_documents/.*' \
        --re-ignore='.*\\.pdf' \
        --re-ignore='.*\\.pkl' \
        --re-ignore='.*\\.png' \
        --re-ignore='.*\\.svg' \
        --re-ignore='.*\\.tmp' \
        --watch=docs \
        --watch=src \
        docs/ docs/_build/html
description = Set up a server to directly preview changes to the HTML pages
setenv =
    PYTHONWARNINGS =

[testenv:docnblive]
base = doclive
description = {[testenv:doclive]description} with cached notebook execution
setenv =
    {[testenv:doclive]setenv}
    EXECUTE_NB = yes

[testenv:linkcheck]
allowlist_externals =
    sphinx-build
commands =
    sphinx-build \
        --builder=linkcheck \
        --show-traceback \
        docs/ docs/_build/linkcheck
description = Check external links in the documentation (requires internet connection)
setenv =
    PYTHONWARNINGS =

[testenv:pdf]
allowlist_externals =
    make
changedir = docs
commands =
    make latexpdf LATEXOPTS=' -interaction=batchmode'
description = Create documentation as a single PDF file
setenv =
    PYTHONWARNINGS =

[testenv:pdfnb]
base = pdf
description = {[testenv:pdf]description} with cached notebook execution
setenv =
    {[testenv:pdf]setenv}
    EXECUTE_NB = yes

[testenv:pdfnb-force]
base = pdf
description = {[testenv:pdf]description} with notebook execution (no cache)
setenv =
    {[testenv:pdf]setenv}
    FORCE_EXECUTE_NB = yes

[testenv:nb]
allowlist_externals =
    pytest
commands =
    pytest --nbmake --nbmake-timeout=3600 {posargs:docs}
description = Run all notebooks with pytest

[testenv:sty]
allowlist_externals =
    pre-commit
commands =
    pre-commit run {posargs} --all-files
description = Perform all linting, formatting, and spelling checks
setenv =
    SKIP = pyright
"""

[tool.uv]
constraint-dependencies = ["kaleido!=0.2.1.post1"]
