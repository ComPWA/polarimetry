# cspell:ignore refdomain refspecific reftarget reftype
# pyright: reportMissingImports=false
# pyright: reportMissingModuleSource=false
"""Abbreviated the annotations generated by sphinx-autodoc.

It's not necessary to generate the full path of type hints, because they are
rendered as clickable links.

See also https://github.com/sphinx-doc/sphinx/issues/5868.
"""
from __future__ import annotations

import sphinx.domains.python
from docutils import nodes
from sphinx.addnodes import pending_xref, pending_xref_condition
from sphinx.application import Sphinx
from sphinx.domains.python import parse_reftarget
from sphinx.environment import BuildEnvironment


def setup(app: Sphinx) -> None:
    app.add_config_value("relink_ref_types", {}, "html")
    app.add_config_value("relink_targets", {}, "html")
    sphinx.domains.python.type_to_xref = _patch_type_to_xref


def _patch_type_to_xref(
    target: str,
    env: BuildEnvironment = None,
    suppress_prefix: bool = False,
) -> pending_xref:
    ref_type_substitutions: dict[str, str] = env.app.config.relink_ref_types
    target_substitutions: dict[str, str] = env.app.config.relink_targets
    reftype, target, title, refspecific = parse_reftarget(target, suppress_prefix)
    target = target_substitutions.get(target, target)
    reftype = ref_type_substitutions.get(target, reftype)
    assert env is not None  # noqa: S101
    return pending_xref(
        "",
        *__create_nodes(env, title),
        refdomain="py",
        reftype=reftype,
        reftarget=target,
        refspecific=refspecific,
        **__get_env_kwargs(env),
    )


def __get_env_kwargs(env: BuildEnvironment) -> dict:
    if env:
        return {
            "py:module": env.ref_context.get("py:module"),
            "py:class": env.ref_context.get("py:class"),
        }
    return {}


def __create_nodes(env: BuildEnvironment, title: str) -> list[nodes.Node]:
    short_name = title.split(".")[-1]
    if env.config.python_use_unqualified_type_names:
        return [
            pending_xref_condition("", short_name, condition="resolved"),
            pending_xref_condition("", title, condition="*"),
        ]
    return [nodes.Text(short_name)]
